//Data_flow level abstraction implementation
module mux81_df(y,i,sel);

input [7:0]i,[2:0]sel;
output y;

assign y=(i[0]*~s[0]*~s[1]*~s[2])+(i[1]*~s[0]*~s[1]*s[2])+(i[2]*~s[0]*s[1]*~s[2])+(i[3]*~s[0]*s[1]*s[2])+(i[4]*s[0]*~s[1]*~s[2])+(i[5]*s[0]*~s[1]*s[2])+(i[6]*s[0]*s[1]*~s[2])+(i[7]*s[0]*s[1]*s[2])

endmodule

//Gate level abstraction implementation
module mux81_gl(y,i,sel);

input [7:0]i,[2:0]sel;
output y;
wire [7:0]w;

and a1(w[0],i[0],~s[0],~s[1],~s[2]);
and a2(w[1],i[1],~s[0],~s[1],s[2]);
and a3(w[2],i[2],~s[0],s[1],~s[2]);
and a4(w[3],i[3],~s[0],s[1],s[2]);
and a5(w[4],i[4],s[0],~s[1],~s[2]);
and a6(w[5],i[5],s[0],~s[1],s[2]);
and a7(w[6],i[6],s[0],s[1],~s[2]);
and a8(w[7],i[7],s[0],s[1],s[2]);
or b1(y,w[0],w[1],w[2],w[3],w[4],w[5],w[6],w[7]);

endmodule

//Behavioral level abstration implementation
module mux81_bhvl(y,i,sel);

input [7:0]i,[2:0]sel;
output reg y;

always@(*)begin
	case(sel)
		3'b000:y=i[0];
		3'b001:y=i[1];
		3'b010:y=i[2];
		3'b011:y=i[3];
		3'b100:y=i[4];
		3'b101:y=i[5];
		3'b110:y=i[6];
		3'b111:y=i[7];
	endcase
	end

endmodule
